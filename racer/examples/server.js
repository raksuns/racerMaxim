// Generated by CoffeeScript 1.7.1
(function () {
	var app, coffeeify, express, fs, http, liveDbMongo, port, racer, racerBrowserChannel, redis, scriptBundle, store, templates;

	fs = require('fs');

	http = require('http');

	coffeeify = require('coffeeify');

	express = require('express');

	liveDbMongo = require('livedb-mongo');

	redis = require('redis').createClient();

	racerBrowserChannel = require('racer-browserchannel');

	racer = require('racer');

	racer.use(require('racer-bundle'));

	templates = require('./templates');

	redis.select(13);

	store = racer.createStore({
		db: liveDbMongo('localhost:27017/racer-todos?auto_reconnect', {
			safe: true
		}),
		redis: redis
	});

	app = express();

	app.use(express.favicon()).use(express.compress()).use(express["static"](__dirname + '/public')).use(racerBrowserChannel(store)).use(store.modelMiddleware()).use(app.router);

	app.use(function (err, req, res, next) {
		console.error(err.stack || (new Error(err)).stack);
		return res.send(500, 'Something broke!');
	});

	store.on('bundle', function (browserify) {
		return browserify.transform(coffeeify);
	});

	scriptBundle = function (cb) {
		return store.bundle(__dirname + '/client.coffee', {
			extensions: ['.coffee']
		}, function (err, js) {
			if (err) {
				return cb(err);
			}
			return cb(null, js);
		});
	};

	if (racer.util.isProduction) {
		scriptBundle(function (err, js) {
			if (err) {
				return;
			}
			return scriptBundle = function (cb) {
				return cb(null, js);
			};
		});
	}

	app.get('/script.js', function (req, res, next) {
		return scriptBundle(function (err, js) {
			if (err) {
				return next(err);
			}
			res.type('js');
			return res.send(js);
		});
	});

	app.get('/', function (req, res) {
		return res.redirect('/home');
	});

	app.get('/:groupName', function (req, res, next) {
		var group, groupName, model;
		groupName = req.params.groupName;
		if (!/^[a-zA-Z0-9_-]+$/.test(groupName)) {
			return next();
		}
		res.setHeader('Cache-Control', 'no-store');
		model = req.getModel();
		group = model.at("groups." + groupName);
		return group.subscribe(function (err) {
			var id0, id1, id2, todoIds;
			if (err) {
				return next(err);
			}
			todoIds = group.at('todoIds');
			if (!todoIds.get()) {
				id0 = model.add('todos', {
					completed: true,
					text: 'Done already'
				});
				id1 = model.add('todos', {
					completed: false,
					text: 'Example todo'
				});
				id2 = model.add('todos', {
					completed: false,
					text: 'Another example'
				});
				todoIds.set([id1, id2, id0]);
			}
			return model.query('todos', todoIds).subscribe(function (err) {
				var context, list;
				if (err) {
					return next(err);
				}
				list = model.refList('_page.list', 'todos', todoIds);
				context = {
					list: list.get(),
					groupName: groupName
				};
				return model.bundle(function (err, bundle) {
					if (err) {
						return next(err);
					}
					context.bundle = bundle;
					return res.send(templates.page(context));
				});
			});
		});
	});

	port = process.env.PORT || 3000;

	http.createServer(app).listen(port, function () {
		return console.log('Go to http://localhost:' + port);
	});

}).call(this);
